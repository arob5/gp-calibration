#!/bin/bash -l
#$ -N run_reps_init_emulator
#$ -P dietzelab                 # Specify project. 
#$ -l buyin                     # Request buyin node. 
#$ -j y                         # Merge the error and output streams into a single file.
#$ -m beas                      # Email when job begins/ends/aborted/suspended

# This script is a wrapper around `run_init_emulator.sh`, intended to call 
# this script multiple times in order to execute `init_emulator.r` multiple
# times in parallel. This script passes arguments to `run_init_emulator.sh`; 
# these are described below. Note that the number of replicate designs is 
# controlled both by the number of parallel executions of `init_emulator.r`,
# in addition to the number of replicates generated by each call to 
# init_emulator.r`. 
#
# Settings passed to `run_init_emulator.sh`:
# EXPERIMENT_TAG: identifier for the current experiment, used to specify directories.
# N_REP_PER_NODE: the number of replicate designs created by each call to 
#                 `init_emulator.r`.
# N_DESIGN: number of design points used in all designs.
# DESIGN_METHOD: design method used to generate all designs.
#
# Other settings: 
# N_NODE: number of calls to `init_emulator.r` (one per node).

# Settings for this script. 
N_NODE=2

# Settings passed to `run_init_emulator.sh`.
EXPERIMENT_TAG="vsem"
N_REP_PER_NODE=2
N_DESIGN=250
DESIGN_METHOD="LHS"

# Print settings.
echo "Commandline arguments:"
echo "Experiment tag: ${EXPERIMENT_TAG}"
echo "Number of design points: ${N_DESIGN}"
echo "Design method: ${DESIGN_METHOD}"
echo "Number of replicate designs per node: ${N_REP_PER_NODE}"
echo "Number of nodes: ${N_NODE}"

# For logging. log file will be moved from its default location to `OUT_DIR`.
LOG_FILENAME="${JOB_NAME}.o${JOB_ID}"
OUT_DIR="/projectnb/dietzelab/arober/gp-calibration/output/gp_inv_prob/${EXPERIMENT_TAG}/init_emulator"
echo "Log file: ${LOG_FILENAME}"
echo "Output directory: ${OUT_DIR}"
mkdir -p ${OUT_DIR};

# Run run_init_emulator.sh` `N_NODE` times.
for i in $( seq 1 ${N_NODE} )
do
  qsub ./run_init_emulator.sh ${EXPERIMENT_TAG} ${N_DESIGN} ${DESIGN_METHOD} ${N_REP_PER_NODE}
done

# Move output file to the output directory (if it exists). 
if [ -d ${OUT_DIR} ]; then
mv "${LOG_FILENAME}" "${OUT_DIR}/${LOG_FILENAME}"
fi






